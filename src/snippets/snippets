// In GroupListView.jsx

const GroupListView = ({ finalData, thenByKey /* ...other props... */ }) => {
  // ... existing state and handlers ...

  // The main render logic now becomes a simple switch
  return (
    <>
      {/* ... Toolbar remains the same ... */}

      {finalData.length > 0 ? (
        thenByKey ? (
          <NestedGroupView
            data={finalData}
            {...{ selection, handleSelectionChange, handleAnalyze }}
          />
        ) : (
          <FlatGroupView
            data={paginatedItems} // Flat view uses pagination directly
            {...{ selection, handleSelectionChange, handleAnalyze }}
          />
        )
      ) : (
        <div className="text-center py-12 text-default-500">
          <p>No results found.</p>
        </div>
      )}

      {/* Pagination is only shown for the flat view */}
      {!thenByKey && pages > 1 && (
        <div className="flex w-full justify-center mt-8">
          <Pagination
            isCompact
            showControls
            page={page}
            total={pages}
            onChange={setPage}
          />
        </div>
      )}

      {/* Modal remains the same */}
    </>
  );
};

// This component renders the simple grid of cards
const FlatGroupView = ({
  data,
  selection,
  handleSelectionChange,
  handleAnalyze
}) => (
  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
    {data.map((group) => (
      <GroupCard
        key={group.key}
        group={group}
        isSelected={selection.has(group.key)}
        onSelectionChange={() => handleSelectionChange(group.key)}
        onAnalyze={() => handleAnalyze(group)}
      />
    ))}
  </div>
);

// This component renders the collapsible, nested view
const NestedGroupView = ({
  data,
  selection,
  handleSelectionChange,
  handleAnalyze
}) => (
  <div className="space-y-4">
    {data.map((primaryGroup) => (
      <PrimaryGroup
        key={primaryGroup.groupKey}
        primaryGroup={primaryGroup}
        selection={selection}
        onSelectionChange={handleSelectionChange}
        onAnalyze={handleAnalyze}
      />
    ))}
  </div>
);

// We also need the PrimaryGroup and GroupCard sub-components
const PrimaryGroup = ({
  primaryGroup,
  selection,
  onSelectionChange,
  onAnalyze
}) => {
  const [isOpen, setIsOpen] = useState(true);

  return (
    <Card shadow="none" className="border">
      <CardHeader className="cursor-pointer" onClick={() => setIsOpen(!isOpen)}>
        <div className="flex justify-between items-center w-full">
          <span className="font-semibold">{primaryGroup.groupKey}</span>
          <Chip size="sm">{primaryGroup.groupCards.length} groups</Chip>
        </div>
      </CardHeader>
      {isOpen && (
        <CardBody>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {primaryGroup.groupCards.map((card) => (
              <GroupCard
                key={card.key}
                group={card}
                isSelected={selection.has(card.key)}
                onSelectionChange={() => onSelectionChange(card.key)}
                onAnalyze={() => onAnalyze(card)}
              />
            ))}
          </div>
        </CardBody>
      )}
    </Card>
  );
};

// A single card component, slightly refactored to be reusable
const GroupCard = ({ group, isSelected, onSelectionChange, onAnalyze }) => (
  <Card shadow="sm" isPressable onPress={onAnalyze}>
    <CardHeader className="flex justify-between items-start">
      <div className="flex flex-col items-start">
        <p className="text-md font-bold truncate">{group.key}</p>
        <p className="text-sm text-default-500">{`${group.count} tests`}</p>
      </div>
      <Checkbox
        aria-label={`Select ${group.key}`}
        isSelected={isSelected}
        onValueChange={onSelectionChange}
        onClick={(e) => e.stopPropagation()}
      />
    </CardHeader>
    <CardBody>
      <Progress
        value={group.passRate}
        color={group.passRate >= 90 ? "success" : "warning"}
        label={`${group.passRate.toFixed(1)}% Pass Rate`}
        showValueLabel
      />
    </CardBody>
  </Card>
);
